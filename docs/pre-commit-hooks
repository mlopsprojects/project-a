# What are Pre-commit Hooks?

Pre-commit hooks run checks before each commit to ensure code quality

- Formatting
- Linting
- Type checking
- Security checks
- Custom validations

## Setup Pre-commit

```bash
# Install pre-commit
pip install pre-commit

# Initialize git repo (if not already done)
git init

# Install the git hooks
pre-commit install
```

## Basic .pre-commit-config.yaml

```yaml
repos:
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
    -   id: trailing-whitespace
    -   id: end-of-file-fixer
    -   id: check-yaml
    -   id: check-added-large-files

-   repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
    -   id: black
        args: [--line-length=88]

-   repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.2.1
    hooks:
    -   id: ruff
        args: [--fix]
```

## Black & Ruff Explained

- **Black**: Python code formatter
  - Consistent style
  - Non-configurable (by design)
  - Line length default: 88 chars

- **Ruff**: Fast Python linter
  - Replaces multiple tools (pylint, flake8, etc)
  - Written in Rust
  - Highly configurable
  - Auto-fixes common issues

## Usage

```bash
# Run against all files
pre-commit run --all-files

# Runs automatically on git commit
git commit -m "your message"
```

## Add Ruff Configuration

```toml
[tool.ruff]
line-length = 88
target-version = "py39"
select = ["E", "F", "I", "B"]
ignore = ["B008"]

[tool.ruff.isort]
known-first-party = ["src"]
```
